@keyframes ft-fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes ft-blurIn {
  from {
    opacity: 0;
    filter: blur(5px);
  }
  to {
    opacity: 1;
    filter: blur(0px);
  }
}

@keyframes ft-typewriter {
  from {
    width: 0;
    overflow: hidden;
  }
  to {
    width: fit-content;
  }
}

@keyframes ft-slideInFromLeft {
  from {
    transform: translateX(-100%);
    opacity: 0;
  }
  to {
    transform: translateX(0%);
    opacity: 1;
  }
}

@keyframes ft-fadeAndScale {
  from {
    transform: scale(0.5);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}

@keyframes ft-colorTransition {
  from {
    color: red;
  }
  to {
    color: black;
  }
}

@keyframes ft-rotateIn {
  from {
    transform: rotate(-360deg);
    opacity: 0;
  }
  to {
    transform: rotate(0deg);
    opacity: 1;
  }
}

@keyframes ft-bounceIn {
  0%,
  40%,
  80%,
  100% {
    transform: translateY(0);
  }
  20% {
    transform: translateY(-10%);
  }
  60% {
    transform: translateY(-5%);
  }
}

@keyframes ft-elastic {
  0%,
  100% {
    transform: scale(1);
  }
  10% {
    transform: scale(1.2);
  }
}

@keyframes ft-highlight {
  from {
    background-color: yellow;
  }
  to {
    background-color: transparent;
  }
}

@keyframes ft-blurAndSharpen {
  from {
    filter: blur(5px);
    opacity: 0;
  }
  to {
    filter: blur(0);
    opacity: 1;
  }
}

@keyframes ft-dropIn {
  from {
    transform: translateY(-10%);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes ft-slideUp {
  from {
    transform: translateY(10%);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes ft-wave {
  from {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-10%);
  }
  to {
    transform: translateY(0);
  }
}

:root {
  --ft-marker-animation: none;
}

.ft-custom-li::marker {
  animation: var(--ft-marker-animation);
}

.ft-code-block {
  animation: var(--ft-marker-animation);
}

/* Override Tailwind Typography .prose styles for code blocks */
.prose .rounded-b-xl {
  overflow: visible !important;
  border-radius: 0 0 0.75rem 0.75rem !important;
}

/* Shiki dual theme support for code syntax highlighting */
/* 対称的なCSS変数制御 - defaultColor: false使用 */
/* フォールバック色でtext言語などテーマなし言語にも対応 */
/* proseクラスの上書きを完全に防ぐ */
.prose .shiki,
.prose code .shiki,
.shiki {
  color: var(--shiki-light, #24292f) !important;
}

html.dark .prose .shiki,
html.dark .prose code .shiki,
html.dark .shiki {
  color: var(--shiki-dark, #e1e4e8) !important;
}

/* Alternative: Media query-based dark mode (if class-based is not available) */
@media (prefers-color-scheme: dark) {
  body:not(.light) .prose .shiki,
  body:not(.light) .prose code .shiki,
  body:not(.light) .shiki {
    color: var(--shiki-dark, #e1e4e8) !important;
  }
}
